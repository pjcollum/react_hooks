{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","year","movies","setMovies","filteredMovies","setFiltered","className","type","onChange","event","myFilter","filter","movie","film","toLowerCase","result","target","value","indexOf","console","log","map","onClick","newState","userState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAwFeA,MArFf,WAAgB,IAAD,EACeC,mBAC1B,CACE,CACEC,KAAM,aACNC,KAAM,MAER,CACED,KAAM,eACNC,KAAM,MAER,CACED,KAAM,cACNC,KAAM,QAbC,mBACNC,EADM,KACEC,EADF,OAkByBJ,mBAAS,IAlBlC,mBAkBNK,EAlBM,KAkBUC,EAlBV,KAyDb,OACE,yBAAKC,UAAU,aACb,2CACA,kDACA,2BAAOC,KAAK,OAAOC,SAtBF,SAACC,GAEpB,IAEMC,EAFQ,YAAOR,GAEKS,QAAO,SAACC,GAChC,IAAIC,EAAOD,EAAMZ,KAAKc,cAClBC,EAASN,EAAMO,OAAOC,MAAMH,cAEhC,OAAOD,EAAKK,QAAQH,IAAW,KAGjCI,QAAQC,IAAIV,GACZL,EAAYK,MAYV,uCACA,qDAECN,EAAeiB,KAAI,SAACZ,GACnB,OAAO,4BAAKA,EAAMT,KAAX,oBAAkCS,EAAMR,SAKjD,6BACCC,EAAOmB,KAAI,SAACT,GACX,OAAO,4BAAKA,EAAMZ,KAAX,oBAAkCY,EAAMX,SAEjD,4BAAQqB,QAxDQ,WAClB,IAAMC,EAAQ,YAAOrB,GAErBqB,EAAS,GAAGvB,KAAO,YACnBuB,EAAS,GAAGtB,KAAO,KAEnBkB,QAAQC,IAAI,wBACZjB,EAAUoB,KAiDR,gBAEA,4BAAQD,QAhDO,WACjB,IAAME,EAAS,YAAOtB,GACtBsB,EAAU,GAAGxB,KAAO,eACpBwB,EAAU,GAAGvB,KAAO,OACpBkB,QAAQC,IAAI,wBAEZjB,EAAUqB,KA0CR,iBCrEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7177ef7.chunk.js","sourcesContent":["import React, { useState } from 'react';      //add useState here\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState(\n    [\n      {\n        name: \"The Matrix\",\n        year: 1999,\n      },\n      {\n        name: \"Harry Potter\",\n        year: 2001,\n      },\n      {\n        name: \"Toy Story 1\",\n        year: 1995,\n      }\n    ]\n  );\n\n  const [filteredMovies, setFiltered] = useState([])\n\n  const changeMovie = () => {            //const needed for hooks\n    const newState = [...movies];\n\n    newState[1].name = \"Gladiator\";\n    newState[1].year = 1999;\n\n    console.log(\"Change movie clicked\");\n    setMovies(newState)\n  }\n\n  const resetMovie = () => {\n    const userState = [...movies];\n    userState[1].name = \"Harry Potter\"\n    userState[1].year = \"2001\"\n    console.log(\"Reset Button clicked\");\n\n    setMovies(userState)\n  }\n\n  const searchMovies = (event) => {\n    //console.log(event.target.value);\n    const getState = [...movies];\n\n    const myFilter = getState.filter((movie) => {\n      let film = movie.name.toLowerCase()\n      let result = event.target.value.toLowerCase()\n\n      return film.indexOf(result) >= 0\n    });\n\n    console.log(myFilter);\n    setFiltered(myFilter)\n    \n    \n\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>React Hooks</h1>\n      <h1>Search for Movies:</h1>\n      <input type=\"text\" onChange={searchMovies} />\n\n      <h2>Movies:</h2>\n      <h3>The search result is:</h3>\n      \n      {filteredMovies.map((event) => {\n        return <h1>{event.name} was released on {event.year}</h1>\n      })}\n\n\n\n      <hr></hr>\n      {movies.map((movie) => {\n        return <h1>{movie.name} was released on {movie.year}</h1>\n      })}\n      <button onClick={changeMovie}>Change Movie</button>\n\n      <button onClick={resetMovie}>Reset Movie</button>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}